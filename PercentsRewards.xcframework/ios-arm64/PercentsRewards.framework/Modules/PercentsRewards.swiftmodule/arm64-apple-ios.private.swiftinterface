// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.1 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios15.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name PercentsRewards
import Combine
import Foundation
import Foundation/*.Bundle*/
import Foundation/*.ProcessInfo*/
import Foundation/*.URL*/
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import os
public struct API {
  public enum Version : Swift.String {
    case v1
    case v2
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum Header : Swift.String {
    case accept
    case contentType
    case authorization
    case sessionID
    case loggingMetadata
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum MimeType : Swift.String {
    case pdf
    case json
    case csv
    case mov
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
public class APICall<Body, QueryItemKeys, Response> where Body : Swift.Encodable, QueryItemKeys : Swift.Hashable, QueryItemKeys : Swift.RawRepresentable, Response : Swift.Decodable, QueryItemKeys.RawValue == Swift.String {
  public init(endPoint: PercentsRewards.EndPoint, version: PercentsRewards.API.Version, httpMethod: PercentsRewards.HTTPMethod, isAuth: Swift.Bool = false)
  public init(path: Swift.String, version: PercentsRewards.API.Version, httpMethod: PercentsRewards.HTTPMethod, isAuth: Swift.Bool = false)
  public init(nonVersionedPath: Swift.String, httpMethod: PercentsRewards.HTTPMethod)
  public init(staticPath: Swift.String, ignoreCache: Swift.Bool = false)
  #if compiler(>=5.3) && $AsyncAwait
  @discardableResult
  public func makeRequest(body: Body? = nil, queryItems: [QueryItemKeys : Swift.String?] = [:], additionalHeaders: [PercentsRewards.API.Header : Swift.String] = [:]) async throws -> Response
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func downloadRequest(body: Body? = nil, queryItems: [QueryItemKeys : Swift.String?] = [:], additionalHeaders: [PercentsRewards.API.Header : Swift.String] = [:], fileType: PercentsRewards.API.MimeType, fileName: Swift.String? = nil) async throws -> Foundation.URL
  #endif
  @objc deinit
}
@_inheritsConvenienceInitializers public class PercentsJSONDecoder : Foundation.JSONDecoder {
  public static let dateFormat: Foundation.DateFormatter
  override public init()
  @objc deinit
}
@_inheritsConvenienceInitializers public class PercentsJSONEncoder : Foundation.JSONEncoder {
  override public init()
  @objc deinit
}
extension Foundation.DateFormatter {
  public static let iso8601Full: Foundation.DateFormatter
}
extension Foundation.Data {
  public var prettyPrintedJSONString: Foundation.NSString? {
    get
  }
}
public struct JSON : Swift.Decodable {
  public var json: [Swift.String : Any]
  public init()
  public init(from decoder: Swift.Decoder) throws
}
public struct Empty : Swift.Codable {
  public init()
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum EmptyKeys : Swift.String {
  case none
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension PercentsRewards.APIError {
  public static func unknown(failedEndPoint: Swift.String, associatedError: Swift.Error?) -> PercentsRewards.APIError
  public static func invalidURL(failedEndPoint: Swift.String) -> PercentsRewards.APIError
  public static func accessTokenNotFoundForAuthRequest(failedEndPoint: Swift.String) -> PercentsRewards.APIError
  public static func parametersCouldNotBeEncoded(failedEndPoint: Swift.String) -> PercentsRewards.APIError
  public static func responseCouldNotBeDecoded(failedEndPoint: Swift.String, additionalInfo: Swift.String) -> PercentsRewards.APIError
  public static func errorCouldNotBeDecoded(failedEndPoint: Swift.String) -> PercentsRewards.APIError
  public static func noFileType(failedEndPoint: Swift.String) -> PercentsRewards.APIError
  public static func unknownDownloadFailed(failedEndPoint: Swift.String) -> PercentsRewards.APIError
  public static func noMockFile(failedEndPoint: Swift.String) -> PercentsRewards.APIError
  public static func invalidContract(failedEndPoint: Swift.String, additionalInfo: Swift.String) -> PercentsRewards.APIError
}
public struct APIError : Foundation.LocalizedError, Swift.Codable {
  public var failedEndPoint: Swift.String
  public let failureReason: PercentsRewards.APIError.FailureReason
  public let failureMessage: Swift.String
  public var additionalInfo: Swift.String?
  public var associatedError: Swift.Error?
  public var httpStatusCode: Swift.Int?
  public init(failedEndPoint: Swift.String = EndPoint.unknown.rawValue, failureReason: PercentsRewards.APIError.FailureReason, failureMessage: Swift.String, additionalInfo: Swift.String? = nil, associatedError: Swift.Error? = nil)
  public init(from decoder: Swift.Decoder) throws
  public var localizedDescription: Swift.String {
    get
  }
  public func log()
  public var nsError: Foundation.NSError {
    get
  }
  public var shouldShowUserError: Swift.Bool {
    get
  }
  public var shouldReportToSentry: Swift.Bool {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
}
public enum EndPoint : Swift.String, PercentsRewards.CaseIterableDefaultsLast {
  case getUserBrands
  case unknown
  public init?(rawValue: Swift.String)
  public typealias AllCases = [PercentsRewards.EndPoint]
  public typealias RawValue = Swift.String
  public static var allCases: [PercentsRewards.EndPoint] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public protocol CaseIterableDefaultsLast : Swift.CaseIterable, Swift.Decodable, Swift.Encodable, Swift.RawRepresentable where Self.AllCases : Swift.BidirectionalCollection, Self.RawValue : Swift.Decodable {
}
extension PercentsRewards.CaseIterableDefaultsLast {
  public init(from decoder: Swift.Decoder) throws
}
extension PercentsRewards.APIError {
  public enum FailureReason : Swift.String, PercentsRewards.CaseIterableDefaultsLast {
    case MISSING_PARAMETER
    case INVALID_PARAMETER
    case INCORRECT_PARAMETER
    case INVALID_PASSWORD
    case USER_NOT_FOUND
    case VIRTUAL_CARD_NOT_FOUND
    case USER_CARD_NOT_FOUND
    case USER_CARD_NOT_ADDED
    case USER_CARD_NOT_DELETED
    case USER_CARD_NOT_UPDATED
    case USER_CARD_INVALID_BRAND
    case CHANGE_PAYMENT_CARD_FAILED
    case INVALID_PHONE_NUMBER
    case TWILIO_ERROR
    case EXISTING_USER
    case INCORRECT_OTP
    case ISSUED_CARD_NOT_FOUND
    case ISSUED_CARD_NOT_UPDATED
    case EPHEMERAL_KEY_NOT_CREATED
    case ISSUED_CARD_PIN_NOT_SET
    case ISSUED_CARD_PIN_EASILY_GUESSED
    case PUPPETEER_ERROR
    case USER_CARD_INTERNATIONAL_CARD
    case USER_CARD_UNSUPPORTED
    case USER_CARD_DUPLICATE
    case USER_NO_BUSINESS_PROFILE
    case USER_NO_PERSONAL_PROFILE
    case USER_BLOCKED
    case UNAUTHENTICATED
    case MISSING_TOKEN
    case SERVER_ERROR
    case VERIFY_AND_CREATE_USER_ERROR
    case TRANSACTION_NOT_FOUND
    case GLOBAL_CARD_NOT_FOUND
    case USER_CARD_DELETED_PROFILE_NOT_UPDATE
    case USER_CARD_SELF_DRIVING_UNCHANGED
    case USER_CARD_CHANGE_SELF_DRIVING_NEED_BUSINESS_SELF_DRIVING_CARD
    case USER_CARD_CHANGE_SELF_DRIVING_NEED_PERSONAL_SELF_DRIVING_CARD
    case VALID_WAITLIST_USER_NOT_FOUND
    case MISSING_BETA_CONSENT
    case USER_BETA_CONSENT_FALSE
    case INVALID_URL
    case ERROR_COULD_NOT_BE_DECODED
    case RESPONSE_COULD_NOT_BE_DECODED
    case PARAMETERS_COULD_NOT_BE_ENCODED
    case ACCESS_TOKEN_INVALID
    case NO_FILE_TYPE
    case DOWNLOAD_FAILED
    case NO_MOCK_FILE
    case INVALID_CONTRACT
    case URLError
    case UNKNOWN
    public init?(rawValue: Swift.String)
    public typealias AllCases = [PercentsRewards.APIError.FailureReason]
    public typealias RawValue = Swift.String
    public static var allCases: [PercentsRewards.APIError.FailureReason] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
public enum HTTPMethod : Swift.String {
  case get
  case post
  case put
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct MetadataHeaders : Swift.Codable {
  public let headerV: PercentsRewards.HeaderVersion
  public init()
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum AppState : Swift.String, Swift.Codable {
  case active
  case inactive
  case background
  case notRunning
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum HeaderVersion : Swift.String, Swift.Codable {
  case v1
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct BrandBalanceTopupBodyRequest : Swift.Codable {
  public let amount: Swift.Int
  public let idempotency_token: Swift.String
  public init(amount: Swift.Int, idempotency_token: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct PRewards {
  public static func configure(token: Swift.String)
  public static func getRewardsViewController() -> UIKit.UIViewController
}
extension PercentsRewards.API.Version : Swift.Equatable {}
extension PercentsRewards.API.Version : Swift.Hashable {}
extension PercentsRewards.API.Version : Swift.RawRepresentable {}
extension PercentsRewards.API.Header : Swift.Equatable {}
extension PercentsRewards.API.Header : Swift.Hashable {}
extension PercentsRewards.API.Header : Swift.RawRepresentable {}
extension PercentsRewards.API.MimeType : Swift.Equatable {}
extension PercentsRewards.API.MimeType : Swift.Hashable {}
extension PercentsRewards.API.MimeType : Swift.RawRepresentable {}
extension PercentsRewards.EmptyKeys : Swift.Equatable {}
extension PercentsRewards.EmptyKeys : Swift.Hashable {}
extension PercentsRewards.EmptyKeys : Swift.RawRepresentable {}
extension PercentsRewards.EndPoint : Swift.Equatable {}
extension PercentsRewards.EndPoint : Swift.Hashable {}
extension PercentsRewards.APIError.FailureReason : Swift.Equatable {}
extension PercentsRewards.APIError.FailureReason : Swift.Hashable {}
extension PercentsRewards.HTTPMethod : Swift.Equatable {}
extension PercentsRewards.HTTPMethod : Swift.Hashable {}
extension PercentsRewards.HTTPMethod : Swift.RawRepresentable {}
extension PercentsRewards.AppState : Swift.Equatable {}
extension PercentsRewards.AppState : Swift.Hashable {}
extension PercentsRewards.AppState : Swift.RawRepresentable {}
extension PercentsRewards.HeaderVersion : Swift.Equatable {}
extension PercentsRewards.HeaderVersion : Swift.Hashable {}
extension PercentsRewards.HeaderVersion : Swift.RawRepresentable {}
